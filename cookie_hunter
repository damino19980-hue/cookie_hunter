#!/usr/bin/env python3
import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import (WebDriverException, 
                                      TimeoutException,
                                      NoSuchElementException)
from cryptography.fernet import Fernet
from webdriver_manager.chrome import ChromeDriverManager

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='cookie_hunter.log'
)

class CookieHunter:
    def __init__(self, target_url):
        self.target_url = target_url
        self.key = Fernet.generate_key()
        self.cipher = Fernet(self.key)
        self.driver = self._init_driver()
        self.logger = logging.getLogger(__name__)

    def _init_driver(self):
        try:
            options = Options()
            options.add_argument("--headless")
            options.add_argument("--disable-gpu")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--window-size=1920,1080")
            options.add_argument(
                "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                "AppleWebKit/537.36 (KHTML, like Gecko) "
                "Chrome/91.0.4472.124 Safari/537.36"
            )
            
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=options)
            driver.set_page_load_timeout(30)
            return driver
        except Exception as e:
            self.logger.error(f"Driver initialization failed: {str(e)}")
            raise

    def get_cookies(self):
        try:
            self.logger.info(f"Accessing: {self.target_url}")
            self.driver.get(self.target_url)
            
            # Wait for page to load
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            time.sleep(2)  # Additional buffer time
            
            cookies = self.driver.get_cookies()
            encrypted_cookies = [
                {
                    "name": c["name"],
                    "value": self.cipher.encrypt(c["value"].encode()).decode(),
                    "domain": c["domain"],
                    "path": c["path"],
                    "expiry": c.get("expiry"),
                    "secure": c["secure"],
                    "httpOnly": c["httpOnly"]
                } for c in cookies
            ]
            
            return {
                "status": "success",
                "url": self.target_url,
                "cookies": encrypted_cookies,
                "decryption_key": self.key.decode(),
                "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
        except TimeoutException:
            msg = f"Timeout while loading {self.target_url}"
            self.logger.warning(msg)
            return {
                "status": "error",
                "message": msg,
                "error_type": "timeout"
            }
        except WebDriverException as e:
            msg = f"Browser error: {str(e)}"
            self.logger.error(msg)
            return {
                "status": "error",
                "message": msg,
                "error_type": "browser_error"
            }
        except Exception as e:
            msg = f"Unexpected error: {str(e)}"
            self.logger.error(msg)
            return {
                "status": "error",
                "message": msg,
                "error_type": "general_error"
            }
        finally:
            try:
                if self.driver:
                    self.driver.quit()
            except Exception as e:
                self.logger.error(f"Error closing driver: {str(e)}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("Usage: python3 cookie_hunter.py <target_url>")
        sys.exit(1)
        
    hunter = CookieHunter(sys.argv[1])
    result = hunter.get_cookies()
    print(json.dumps(result, indent=2))
